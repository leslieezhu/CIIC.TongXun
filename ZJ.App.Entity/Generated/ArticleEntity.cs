/**************************************************************
 * This file is part of  Project  
 * Copyright (C)2020 Microsoft
 * 
 * Author      : Generated by CodeSmith(Entity_v2.cst)
 * Mail        : 
 * Create Date : 2020/4/14 9:40:26
 * Summary     : this file was auto generated by tool . do not modify
 * 
 * 
 * Modified By : 
 * Date        : 
 * Mail        :
 * Comment     :   
 * *************************************************************/

using System; 
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Runtime.Serialization;
using ZJ.App.Common;

namespace ZJ.App.Entity
{
	/// <summary>
	/// 表Article数据实体
	/// </summary>
	[Serializable]
    [DataContract]
	[TableName("Article")]
	public partial class ArticleEntity : EntityBase
	{ 
		
		#region 构造函数
		///<summary>
		///
		///</summary>
		public ArticleEntity():base()
		{
			
		}

        public ArticleEntity(bool IsQueryTemplate) : base(IsQueryTemplate)
        {

        }
		 
		#endregion 
		
		#region 公共属性
        #region Id
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_Id = "Id";
        private int _Id;
		///<summary>
		///
		///</summary>
        [DataMember]
		[PrimaryKey]
		public int Id
		{
			get{return _Id;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_Id, value);
                }
                
                _Id = value;
            }
		}
        
	    #endregion

        #region ArticleTitle
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_ArticleTitle = "ArticleTitle";
        private string _ArticleTitle;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column]
		public string ArticleTitle
		{
			get{return _ArticleTitle;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_ArticleTitle, value);
                }
                
                _ArticleTitle = value;
            }
		}
        
	    #endregion

        #region ArticleContent
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_ArticleContent = "ArticleContent";
        private string _ArticleContent;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column]
		public string ArticleContent
		{
			get{return _ArticleContent;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_ArticleContent, value);
                }
                
                _ArticleContent = value;
            }
		}
        
	    #endregion

        #region IsPublic
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_IsPublic = "IsPublic";
        private int? _IsPublic;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column]
		public int? IsPublic
		{
			get{return _IsPublic;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_IsPublic, value);
                }
                
                _IsPublic = value;
            }
		}
        
	    #endregion

        #region CreateTime
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_CreateTime = "CreateTime";
        private System.DateTime? _CreateTime;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column]
		public System.DateTime? CreateTime
		{
			get{return _CreateTime;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_CreateTime, value);
                }
                
                _CreateTime = value;
            }
		}
        
	    #endregion

        #region CreateBy
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_CreateBy = "CreateBy";
        private int? _CreateBy;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column]
		public int? CreateBy
		{
			get{return _CreateBy;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_CreateBy, value);
                }
                
                _CreateBy = value;
            }
		}
        
	    #endregion

        #region IsDelete
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_IsDelete = "IsDelete";
        private int? _IsDelete;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column]
		public int? IsDelete
		{
			get{return _IsDelete;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_IsDelete, value);
                }
                
                _IsDelete = value;
            }
		}
        
	    #endregion

        #region ArticlePropertyId
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_ArticlePropertyId = "ArticlePropertyId";
        private int? _ArticlePropertyId;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column]
		public int? ArticlePropertyId
		{
			get{return _ArticlePropertyId;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_ArticlePropertyId, value);
                }
                
                _ArticlePropertyId = value;
            }
		}
        
	    #endregion

        #region CategoryId
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_CategoryId = "CategoryId";
        private int? _CategoryId;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column]
		public int? CategoryId
		{
			get{return _CategoryId;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_CategoryId, value);
                }
                
                _CategoryId = value;
            }
		}
        
	    #endregion

        #region NoOfJournal当前期刊文章序数
        ///<summary>
        ///当前期刊文章序数
        ///</summary>
        public const string FieldName_NoOfJournal = "NoOfJournal";
        private short? _NoOfJournal;
		///<summary>
		///当前期刊文章序数
		///</summary>
        [DataMember]
        [Column]
		public short? NoOfJournal
		{
			get{return _NoOfJournal;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_NoOfJournal, value);
                }
                
                _NoOfJournal = value;
            }
		}
        
	    #endregion

        #region NoOfCategory类别序数
        ///<summary>
        ///类别序数
        ///</summary>
        public const string FieldName_NoOfCategory = "NoOfCategory";
        private short? _NoOfCategory;
		///<summary>
		///类别序数
		///</summary>
        [DataMember]
        [Column]
		public short? NoOfCategory
		{
			get{return _NoOfCategory;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_NoOfCategory, value);
                }
                
                _NoOfCategory = value;
            }
		}
        
	    #endregion

        #region ArticleTitleAlias
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_ArticleTitleAlias = "ArticleTitleAlias";
        private string _ArticleTitleAlias;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column]
		public string ArticleTitleAlias
		{
			get{return _ArticleTitleAlias;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_ArticleTitleAlias, value);
                }
                
                _ArticleTitleAlias = value;
            }
		}
        
	    #endregion

        #region IsTop
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_IsTop = "IsTop";
        private int? _IsTop;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column]
		public int? IsTop
		{
			get{return _IsTop;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_IsTop, value);
                }
                
                _IsTop = value;
            }
		}
        
	    #endregion
		#endregion
	}
}

